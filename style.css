* {
  box-sizing: border-box;
  -webkit-tap-highlight-color: transparent;
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  outline: 0.1px solid green;
}

.container {
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  width: 100%;
  aspect-ratio: 5 / 4;
}

.row-container {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  width: 100%;
  gap: 5px 1%;
  perspective: 1000px; /* Add perspective to the container */
}

.card {
  width: 20%;
  cursor: pointer;
  transform-style: preserve-3d;
  transition: transform 0.6s;
  position: relative;
  animation: getCard 0.5s ease-in;
}

.card img {
  width: 100%;
  backface-visibility: hidden;
}

.card .front {
  transform: rotateY(180deg);
  backface-visibility: hidden; /* Ensure proper rendering */
}

.card .back {
  position: absolute;
  top: 0;
  left: 0;
  backface-visibility: hidden; /* Ensure proper rendering */
}

.card.flipped {
  transform: rotateY(180deg); /* Flip the card */
}

.card.flipped .delete-button {
  position: absolute;
  top: 1%;
  right: 2%;
  width: 8%;
  height: 5%;
  display: block;
  cursor: pointer;
  z-index: 1; /* Ensure the button is on top */
}

.card .delete-button {
  display: none; /* Hide the delete button */
}

/* Define the getCard animation */
@keyframes getCard {
  from {
    opacity: 0;
    transform: translateY(-25%); /* Start above the original position */
  }
  to {
    opacity: 1;
    transform: translateY(0); /* End at the original position */
  }
}

@keyframes deleteCard {
  from {
    opacity: 1;
    transform: scale(1);
  }
  to {
    opacity: 0;
    transform: scale(0);
  }
}

.card.deleting {
  animation: deleteCard 0.5s forwards;
}

.card.flipped.deleting {
  transform: rotateY(180deg) scale(0) !important; /* Ensure the card stays flipped */
}

.card.flipped.deleting .back {
  display: none; /* Hide the back face */
}

@media only screen and (min-width: 600px) {
  body {
    display: grid;
    grid:
    "header header" 1fr
    "main aside" auto
    "footer footer" 1fr
    / 2fr 1fr;
  }
  header {
    grid-area: header;
  }
  main {
    grid-area: main;
  }
  aside {
    grid-area: aside;
  }
  footer {
    grid-area: footer;
  }
}